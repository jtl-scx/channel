services:
  _defaults:
    autowire: true
    autoconfigure: true
    public: false

  _instanceof:
    JTL\SCX\Lib\Channel\Core\Command\AbstractCommand:
      tags: ['console.command']
    JTL\Nachricht\Contract\Listener\Listener:
      public: true

  Psr\Log\LoggerInterface: '@Monolog\Logger'

  JTL\Nachricht\Contract\Emitter\Emitter: '@JTL\Nachricht\Emitter\AmqpEmitter'

  # DI Setup - if you change the namespace of your project
  # consider to change the namespace below to a working DI container

  JTL\SCX\Channel\:
    resource: '../src/*'

  JTL\SCX\Channel\SignUpController:
    public: true

  # Meta Data Services - Demo implementation

  JTL\SCX\Lib\Channel\Contract\MetaData\MetaCategoryLoader: '@JTL\SCX\Channel\Demo\MetaData\CategoryTreeLoader'

  JTL\SCX\Lib\Channel\Contract\MetaData\MetaDataCategoryAttributeLoader: '@JTL\SCX\Channel\Demo\MetaData\CategoryAttributeLoader'

  JTL\SCX\Lib\Channel\Contract\MetaData\SellerAttributeLoader: '@JTL\SCX\Channel\Demo\MetaData\SellerAttributeLoader'

  JTL\SCX\Lib\Channel\MetaData\Attribute\AttributeUpdateRequestListener:
    class: JTL\SCX\Lib\Channel\MetaData\Attribute\AttributeUpdateRequestListener

  # JTL\SCX\Lib\Channel\Contract\MetaData\SellerAttributeLoader:
  #   class: JTL\SCX\Channel\MetaData\Attribute\SellerAttributeLoader

  # >>>Monitoring: Metric Collection for Message Consumer

  # switch Dispatcher
  # JTL\Nachricht\Dispatcher\AmqpDispatcher: '@JTL\SCX\Lib\Channel\Core\Metrics\CountingAmqpDispatcher'

  # Setup Client
  # GuzzleHttp.ClientInterface.GoPrometrics:
  #  class: GuzzleHttp\Client
  #  public: true
  #  arguments:
  #    # use a small timeout - because metrics collection is fast and must not consume time.
  #    - timeout: 0.3
  #
  # JTL\GoPrometrics\Client\Counter:
  #  public: true
  #  arguments:
  #    - '@GuzzleHttp.ClientInterface.GoPrometrics'
  #    - '%env(METRIC_COLLECTION_URL)%'

  # <<<Monitoring: Metric Collection for Message Consumer

  # Add your additional services below





